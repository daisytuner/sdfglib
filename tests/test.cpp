#include <gtest/gtest.h>

#include "analysis/assumptions_analysis_test.cpp"
#include "analysis/data_parallelism_analysis_test.cpp"
#include "analysis/happens_before_analysis_test.cpp"
#include "analysis/users_test.cpp"
#include "builder/function_builder_test.cpp"
#include "builder/sdfg_builder_test.cpp"
#include "builder/structured_sdfg_builder_test.cpp"
#include "codegen/code_generators/c_code_generator_test.cpp"
#include "codegen/code_generators/cpp_code_generator_test.cpp"
#include "codegen/code_generators/cuda_code_generator_test.cpp"
#include "codegen/dispatchers/block_dispatcher_test.cpp"
#include "codegen/dispatchers/for_dispatcher_test.cpp"
#include "codegen/dispatchers/if_else_dispatcher_test.cpp"
#include "codegen/dispatchers/node_dispatcher_factory_test.cpp"
#include "codegen/dispatchers/node_dispatcher_test.cpp"
#include "codegen/dispatchers/schedules/highway_dispatcher_test.cpp"
#include "codegen/dispatchers/schedules/openmp_dispatcher_test.cpp"
#include "codegen/dispatchers/sequence_dispatcher_test.cpp"
#include "codegen/dispatchers/while_dispatcher_test.cpp"
#include "codegen/language_extensions/c_language_extension_test.cpp"
#include "codegen/language_extensions/cpp_language_extension_test.cpp"
#include "codegen/language_extensions/cuda_language_extension_test.cpp"
#include "codegen/utils_test.cpp"
#include "conditional_schedule_test.cpp"
#include "data_flow/data_flow_graph_test.cpp"
#include "deepcopy/structured_sdfg_deep_copy_test.cpp"
#include "element_test.cpp"
#include "graph/graph_algorithms_test.cpp"
#include "helpers/helpers_test.cpp"
#include "passes/dataflow/dead_data_elimination_test.cpp"
#include "passes/dataflow/redundant_array_elimination_test.cpp"
#include "passes/dataflow/trivial_array_elimination_test.cpp"
#include "passes/dataflow/view_propagation_test.cpp"
#include "passes/normalization/conditional_loop_fissioning_test.cpp"
#include "passes/normalization/conditional_tasklet_propagation_test.cpp"
#include "passes/normalization/loop_slicing_test.cpp"
#include "passes/normalization/transition_to_tasklet_conversion_test.cpp"
#include "passes/pipeline_test.cpp"
#include "passes/schedule/allocation_inference_test.cpp"
#include "passes/schedule/perfect_loop_distribution_test.cpp"
#include "passes/schedule/stride_minimization_test.cpp"
#include "passes/structured_control_flow/block_fusion_test.cpp"
#include "passes/symbolic/symbol_promotion_test.cpp"
#include "passes/symbolic/symbol_propagation_test.cpp"
#include "replace/symbol_replace_test.cpp"
#include "schedule_test.cpp"
#include "sdfg_test.cpp"
#include "serializer/json_serializer_test.cpp"
#include "structured_sdfg_test.cpp"
#include "symbolic/analysis_test.cpp"
#include "symbolic/assumptions_test.cpp"
#include "symbolic/symbolic_test.cpp"
#include "transformations/kernel_local_storage_test.cpp"
#include "transformations/loop_interchange_test.cpp"
#include "transformations/loop_slicing_test.cpp"
#include "transformations/loop_tiling_test.cpp"
#include "transformations/loop_to_kernel_dim_test.cpp"
#include "transformations/loop_unroll_test.cpp"
#include "transformations/out_local_storage_test.cpp"
#include "transformations/vectorization_test.cpp"
#include "types/array_test.cpp"
#include "types/pointer_test.cpp"
#include "types/primitive_type_test.cpp"
#include "types/scalar_test.cpp"
#include "types/structure_test.cpp"
#include "types/utils_test.cpp"
#include "visitor/structured_sdfg_visitor_test.cpp"

int main(int argc, char **argv) {
    testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}
